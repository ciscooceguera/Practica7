Index: Carta/RazaDeDragonBall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Carta;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class RazaDeDragonBall extends Carta {\r\n    private String raza,nombre;\r\n    public RazaDeDragonBall(String raza, String nombre){\r\n        this.raza = raza;\r\n        this.nombre = nombre;\r\n    }\r\n    @Override\r\n    public boolean esIgual(Carta otraCarta){\r\n        String raza2 = ((RazaDeDragonBall)otraCarta).raza;\r\n        return raza.equals(raza2);\r\n    }\r\n    @Override\r\n    public Icon obtenerIcono(){\r\n        ImageIcon imagenDB = new ImageIcon(\"C:\\\\Users\\\\joser\\\\IdeaProjects\\\\Practica 7\\\\RazaDragonBall\\\\\"+raza+nombre+\".png\");\r\n        Image imagen = imagenDB.getImage();\r\n        int alturaNueva = 150;\r\n        int anchoNuevo = 150;\r\n        Image imagenEscalada = imagen.getScaledInstance(alturaNueva, anchoNuevo, Image.SCALE_SMOOTH);\r\n        return new ImageIcon(imagenEscalada);\r\n    }\r\n    @Override\r\n    public String obtenerDescripcion() {\r\n        return raza;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Carta/RazaDeDragonBall.java b/Carta/RazaDeDragonBall.java
--- a/Carta/RazaDeDragonBall.java	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/Carta/RazaDeDragonBall.java	(date 1746451401950)
@@ -16,7 +16,7 @@
     }
     @Override
     public Icon obtenerIcono(){
-        ImageIcon imagenDB = new ImageIcon("C:\\Users\\joser\\IdeaProjects\\Practica 7\\RazaDragonBall\\"+raza+nombre+".png");
+        ImageIcon imagenDB = new ImageIcon("C:\\Users\\RedBo\\OneDrive\\Escritorio\\POO\\Practica7\\RazaDragonBall\\"+raza+nombre+".png");
         Image imagen = imagenDB.getImage();
         int alturaNueva = 150;
         int anchoNuevo = 150;
Index: Memorama.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Carta.*;\r\nimport javax.swing.*;\r\nimport javax.swing.Timer;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.*;\r\n\r\npublic class Memorama extends JFrame{\r\n    private JTextArea turnoText, cartasVolteadas;\r\n    private ArrayList<JButton> tarjetas;\r\n    private int numJugadores, turno;\r\n    private String figura;\r\n    private ArrayList<JButton> tarjetasVolteadas;\r\n    private HashMap<Integer, Integer> jugadores;\r\n    private int[] cartasVolteadasConteo = new int[4];\r\n    private int contadorCartasAdivinadas;\r\n    private HashMap<Integer,Integer> numCartasVolteadas;\r\n    private boolean bloqueo = false;\r\n    private JButton salir;\r\n    private JButton instrucciones;\r\n\r\n    public Memorama(int numJugadores, String figura) {\r\n        super(\"Memorama\");\r\n        turno = 1;\r\n        tarjetas = new ArrayList<>();\r\n        this.numJugadores = numJugadores;\r\n        this.figura = figura;\r\n        this.setLocationRelativeTo(null);\r\n        numCartasVolteadas = new HashMap<>();\r\n        tarjetasVolteadas = new ArrayList<>();\r\n        jugadores = new HashMap<>();\r\n        inicializarJugadores();\r\n        inicializarComponentes();\r\n        configurarVentana();\r\n        setLocationRelativeTo(null);\r\n        turnoText.setText(turnoToString());\r\n        cartasVolteadas.setText(getCartasVolteadas());\r\n        contadorCartasAdivinadas = 0;\r\n\r\n\r\n\r\n    }\r\n    \r\n    public void cambiarTurno(){\r\n        turno = (turno%numJugadores)+1;\r\n    }\r\n    public void inicializarComponentes(){\r\n        turnoText = new JTextArea(20,20);\r\n        turnoText.setEditable(false);\r\n        cartasVolteadas = new JTextArea(20,20);\r\n        cartasVolteadas.setEditable(false);\r\n        ArrayList<Carta> cartas = generarCartas();\r\n        Collections.shuffle(cartas);\r\n        for(int i=0; i<16; i++){\r\n            JButton b = new JButton();\r\n            b.setSize(150,150);\r\n            b.setBackground(new Color(255, 152, 18));\r\n            b.setFont(new Font(\"Arial\",Font.BOLD,70));\r\n            b.setForeground(Color.WHITE);\r\n            b.putClientProperty(\"carta\",cartas.get(i));\r\n            b.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    seleccionarCarta(b);\r\n                }\r\n            });\r\n            b.setEnabled(true);\r\n            tarjetas.add(b);\r\n        }\r\n        for (int i = 1; i<= numJugadores; i++){\r\n            numCartasVolteadas.put(i,0);\r\n        }\r\n        salir = new JButton(\"Salir\");\r\n        salir.setPreferredSize(new Dimension(200, 50));\r\n        salir.setEnabled(false);\r\n        salir.setBackground(new Color(70,130,180));\r\n        salir.setForeground(Color.WHITE);\r\n        salir.setFocusPainted(false);\r\n        salir.setFont(new Font(\"Arial\",Font.BOLD,15));\r\n        salir.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));\r\n        instrucciones = new JButton(\"Instrucciones\");\r\n        instrucciones.setPreferredSize(new Dimension(200, 50));\r\n        instrucciones.setBackground(new Color(70,130,180));\r\n        instrucciones.setForeground(Color.WHITE);\r\n        instrucciones.setFocusPainted(false);\r\n        instrucciones.setFont(new Font(\"Arial\",Font.BOLD,15));\r\n        instrucciones.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));\r\n    }\r\n    public String puntajesToString(){\r\n        String mensajePuntajes = \"\";\r\n        for (int i=1; i<= numJugadores; i++){\r\n            mensajePuntajes += \"Jugador \"+ (i) + \": \" + numCartasVolteadas.get(i)+\"\\n\";\r\n        }\r\n        return mensajePuntajes;\r\n    }\r\n    public void seleccionarCarta(JButton boton){\r\n        if (bloqueo || tarjetasVolteadas.contains(boton)){\r\n            return;\r\n        }\r\n        Carta carta= (Carta) boton.getClientProperty(\"carta\");\r\n        if (figura == \"Numero\"){\r\n            boton.setText(carta.obtenerDescripcion());\r\n        }else{\r\n            boton.setIcon(carta.obtenerIcono());\r\n        }\r\n        tarjetasVolteadas.add(boton);\r\n        if (tarjetasVolteadas.size() == 2 && tarjetasVolteadas.get(0)!=boton){\r\n            bloqueo = true;\r\n            JButton b1 = tarjetasVolteadas.get(0);\r\n            JButton b2 = tarjetasVolteadas.get(1);\r\n            Carta carta1 = (Carta) b1.getClientProperty(\"carta\");\r\n            Carta carta2 = (Carta) b2.getClientProperty(\"carta\");\r\n\r\n            if (carta1.esIgual(carta2)) {\r\n                b1.setEnabled(false);\r\n                b2.setEnabled(false);\r\n                bloqueo = false;\r\n                int numCartasAtinadas = numCartasVolteadas.get(turno);\r\n                numCartasVolteadas.remove(turno);\r\n                numCartasVolteadas.put(turno, numCartasAtinadas+1);\r\n                tarjetasVolteadas.clear();\r\n                cartasVolteadas.setText(puntajesToString());\r\n                contadorCartasAdivinadas+=2;\r\n                if (contadorCartasAdivinadas==16){\r\n                    JOptionPane.showMessageDialog(null,mensajeGanador());\r\n                    salir.setEnabled(true);\r\n                }\r\n            }else{\r\n                cambiarTurno();\r\n                turnoText.setText(turnoToString());\r\n\r\n                // retraso\r\n                Timer timer = new Timer(1000, new ActionListener() {\r\n                    @Override\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        b1.setIcon(null);\r\n                        b2.setIcon(null);\r\n                        b1.setText(\"\");\r\n                        b2.setText(\"\");\r\n                        tarjetasVolteadas.clear();\r\n                        bloqueo = false;\r\n                    }\r\n                });\r\n                timer.setRepeats(false);\r\n                timer.start();\r\n\r\n            }\r\n        }\r\n    }\r\n    public String mensajeGanador(){\r\n        return \"Ha ganado el jugador \" + getGanador();\r\n    }\r\n    public String getGanador(){\r\n        Integer posicion = 0;\r\n        Integer max = 0;\r\n        for (int i = 1 ; i<=numJugadores; i++){\r\n            Integer valor = numCartasVolteadas.get(i);\r\n            if (max<valor){\r\n                max = valor;\r\n            }\r\n        }\r\n        for (int i = 1 ; i<=numJugadores; i++){\r\n            Integer valor = numCartasVolteadas.get(i);\r\n            if (valor == max){\r\n                posicion = i;\r\n            }\r\n        }\r\n        return String.valueOf(posicion);\r\n    }\r\n    public String turnoToString(){\r\n        String mensajeTurno = \"-> Turno: \\n   Jugador \"+turno+\"\\n\";\r\n        return mensajeTurno;\r\n    }\r\n    public ArrayList<Carta> generarCartas(){\r\n        ArrayList<Carta> cartas = new ArrayList<>();\r\n        switch(figura){\r\n            case \"Bandera\":\r\n                ArrayList<String> paises = new ArrayList<>();\r\n                paises.add(\"Brasil\");\r\n                paises.add(\"Argentina\");\r\n                paises.add(\"Canada\");\r\n                paises.add(\"Espa√±a\");\r\n                paises.add(\"Inglaterra\");\r\n                paises.add(\"Italia\");\r\n                paises.add(\"Mexico\");\r\n                paises.add(\"USA\");\r\n                for(String pais: paises){\r\n                    cartas.add(new Bandera(pais,true));\r\n                    cartas.add(new Bandera(pais,false));\r\n                }\r\n                break;\r\n            case \"Numero\":\r\n                // Creando los numeros con random\r\n                HashSet<Integer> numeros = new HashSet<>();\r\n                Random rnd = new Random();\r\n                int countPares = 0;\r\n                int countImpares = 0;\r\n                while (numeros.size()<16){\r\n                    int num = rnd.nextInt(1,100)+1;\r\n                    if (num%2 == 0){\r\n                        if (countPares<8){\r\n                            if (numeros.add(num)){\r\n                                countPares++;\r\n                            }\r\n                        }\r\n                    }else{\r\n                        if (countImpares<8){\r\n                            if (numeros.add(num)){\r\n                                countImpares++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (Integer numero : numeros){\r\n                    cartas.add(new Numero(numero));\r\n                }\r\n                /* Con imagenes\r\n                cartas.add(new Numero(1));\r\n                cartas.add(new Numero(6));\r\n                cartas.add(new Numero(7));\r\n                cartas.add(new Numero(8));\r\n                cartas.add(new Numero(9));\r\n                cartas.add(new Numero(10));\r\n                cartas.add(new Numero(13));\r\n                cartas.add(new Numero(14));\r\n                cartas.add(new Numero(22));\r\n                cartas.add(new Numero(27));\r\n                cartas.add(new Numero(41));\r\n                cartas.add(new Numero(50));\r\n                cartas.add(new Numero(77));\r\n                cartas.add(new Numero(78));\r\n                cartas.add(new Numero(88));\r\n                cartas.add(new Numero(99));*/\r\n                break;\r\n            case \"Raza de Dragon Ball\":\r\n                String[] razas = {\"Angel\",\"Buu\",\"DemonioDelFrio\",\"Dios\",\"Humano\",\"Kaio\",\"Namek\",\"Saiyan\"};\r\n                String[] nombresPersonajes = {\"Vados\",\"Whis\",\"Gordo\",\"Kid\",\"Freezer\",\"KingCold\",\"Bills\",\"Champa\",\"Krillin\",\"Yamcha\",\r\n                        \"Gordo\",\"Shin\",\"Dende\",\"Picollo\",\"Goku\",\"Vegeta\"};\r\n                int count = 0;\r\n                for (String raza: razas){\r\n                    cartas.add(new RazaDeDragonBall(raza,nombresPersonajes[count]));\r\n                    count++;\r\n                    cartas.add(new RazaDeDragonBall(raza,nombresPersonajes[count]));\r\n                    count++;\r\n                }\r\n                break;\r\n        }\r\n        Collections.shuffle(cartas);\r\n        return cartas;\r\n    }\r\n\r\n    public void configurarVentana(){\r\n        this.setLayout(new BorderLayout());\r\n        JPanel tablero = new JPanel();\r\n        tablero.setPreferredSize(new Dimension(660, 660));\r\n        tablero.setLayout(new GridLayout(4,4));\r\n        JPanel textos = new JPanel();\r\n        textos.setLayout(new GridLayout(1,2));\r\n        textos.setPreferredSize(new Dimension(660, 155));\r\n        for(int i=0; i<tarjetas.size(); i++){\r\n            JButton b = tarjetas.get(i);\r\n            tablero.add(b);\r\n        }\r\n        turnoText.setFont(new Font(\"Monospaced\", Font.BOLD, 30));\r\n        turnoText.setBackground(new Color(0, 255, 255));\r\n        turnoText.setBorder(BorderFactory.createTitledBorder(\"Puntajes:\"));\r\n        cartasVolteadas.setFont(new Font(\"Monospaced\", Font.PLAIN, 16));\r\n        cartasVolteadas.setBackground(new Color(0, 255, 255));\r\n        cartasVolteadas.setBorder(BorderFactory.createTitledBorder(\"Cartas Volteadas:\"));\r\n        cartasVolteadas.setText(puntajesToString());\r\n        textos.add(turnoText);\r\n        textos.add(cartasVolteadas);\r\n        JPanel boton = new JPanel();\r\n        boton.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n        // salir\r\n        salir.addActionListener(e-> {\r\n            this.dispose();\r\n        });\r\n        instrucciones.addActionListener(e->{\r\n            switch(figura){\r\n                case \"Bandera\":\r\n                    JOptionPane.showMessageDialog(null,\r\n                            \"1. El juego se dispone de 16 cartas: 8 banderas y 8 escudos.\\n\" +\r\n                                    \"2. En cada turno, el jugador podr√° voltear un m√°ximo de 2 cartas.\\n \" +\r\n                                    \"   Si ambas cartas resultan par podr√° repetir turno.\\n\" +\r\n                                    \"3. Se considera un par v√°lido si:\\n\" +\r\n                                    \"   - Logras voltear una bandera y su respectivo escudo.\\n\" +\r\n                                    \"4. Si las cartas no resultan en un par se colocan boca abajo nuevamente.\\n\" +\r\n                                    \"5. El juego termina cuando todos los pares hayan sido encontrados.\",\r\n                            \"Instrucciones\",\r\n                            JOptionPane.INFORMATION_MESSAGE);\r\n                    break;\r\n                case \"Numero\":\r\n                    JOptionPane.showMessageDialog(null,\r\n                            \"1. El juego se dispone de 16 cartas.\\n\" +\r\n                                    \"2. En cada turno, el jugador podr√° voltear un m√°ximo de 2 cartas.\\n \" +\r\n                                    \"   Si ambas cartas resultan par podr√° repetir turno.\\n\" +\r\n                                    \"3. Se considera un par v√°lido cuando:\\n\" +\r\n                                    \"   - Ambas cartas volteadas son n√∫meros par.\\n\" +\r\n                                    \"   - Ambas cartas volteadas son n√∫meros impar.\\n\" +\r\n                                    \"4. Si las cartas no resultan en un par se colocan boca abajo nuevamente.\\n\" +\r\n                                    \"5. El juego termina cuando todos los pares hayan sido encontrados.\",\r\n                            \"Instrucciones\",\r\n                            JOptionPane.INFORMATION_MESSAGE);\r\n                    break;\r\n                case \"Raza de Dragon Ball\":\r\n                    JOptionPane.showMessageDialog(null,\r\n                            \"1. El juego se dispone de 16 cartas.\\n\" +\r\n                                    \"2. En cada turno, el jugador podr√° voltear un m√°ximo de 2 cartas.\\n \" +\r\n                                    \"   Si ambas cartas resultan par podr√° repetir turno.\\n\" +\r\n                                    \"3. Se considera un par v√°lido cuando:\\n\" +\r\n                                    \"   - Ambas cartas poseen personajes pertenecientes al mismo tipo de raza\\n\" +\r\n                                    \"4. Si las cartas no resultan en un par se colocan boca abajo nuevamente.\\n\" +\r\n                                    \"5. El juego termina cuando todos los pares hayan sido encontrados.\",\r\n                            \"Instrucciones\",\r\n                            JOptionPane.INFORMATION_MESSAGE);\r\n                    break;\r\n            }\r\n\r\n        });\r\n        boton.setPreferredSize(new Dimension(660, 70));\r\n        boton.add(instrucciones);\r\n        boton.add(salir);\r\n\r\n        this.add(tablero, BorderLayout.NORTH);\r\n        this.add(textos, BorderLayout.CENTER);\r\n        this.add(boton, BorderLayout.SOUTH);\r\n        this.setSize(750, 950);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setVisible(true);\r\n    }\r\n\r\n    public String getPuntajes(){\r\n        String puntajes = \"\";\r\n        for(int i=0; i<numJugadores; i++){\r\n            puntajes += \"Jugador \"+(i+1)+\": \"+jugadores.get(i)+\"\\n\";\r\n        }\r\n        return puntajes;\r\n    }\r\n\r\n    public void inicializarJugadores(){\r\n        for(int i=0; i<numJugadores; i++){\r\n            cartasVolteadasConteo[i] = 0;\r\n            jugadores.put(i,0);\r\n        }\r\n    }\r\n\r\n    public String getCartasVolteadas(){\r\n        String cartasVolteadas = \"\";\r\n        for(int i=0; i<numJugadores; i++){\r\n            cartasVolteadas += \"Jugador \"+(i+1)+\": \"+cartasVolteadasConteo[i]+\"\\n\";\r\n        }\r\n        return cartasVolteadas;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Memorama.java b/Memorama.java
--- a/Memorama.java	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/Memorama.java	(date 1746451401964)
@@ -149,7 +149,11 @@
         }
     }
     public String mensajeGanador(){
-        return "Ha ganado el jugador " + getGanador();
+        String mensaje = getGanador();
+        if (mensaje == "Empate"){
+            return "Empate";
+        }
+        return "Ha ganado el jugador "+mensaje;
     }
     public String getGanador(){
         Integer posicion = 0;
@@ -160,6 +164,17 @@
                 max = valor;
             }
         }
+        // evaluar empate
+        int count = 0;
+        for (int i = 1; i<=numJugadores; i++){
+            Integer valor = numCartasVolteadas.get(i);
+            if (max == valor){
+                count ++;
+                if (count == 2) {
+                    return "Empate";
+                }
+            }
+        }
         for (int i = 1 ; i<=numJugadores; i++){
             Integer valor = numCartasVolteadas.get(i);
             if (valor == max){
Index: Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\n// Clase main\r\npublic class Main {\r\n    // metodo main\r\n    public static void main(String[] args) {\r\n        // ventana\r\n        JFrame ventana = new JFrame(\"Memorama\");\r\n        ventana.setSize(500,500);\r\n        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        ventana.setLocationRelativeTo(null);\r\n        ventana.setLayout(null);\r\n        ventana.setVisible(true);\r\n\r\n        // imagen\r\n        ImageIcon pic = new ImageIcon(\"C:\\\\Users\\\\joser\\\\IdeaProjects\\\\Practica 7\\\\ImageMain.png\");\r\n        JLabel image = new JLabel(pic);\r\n        image.setBounds(0,0,500,500);\r\n        ventana.setContentPane(image);\r\n        // panel para la imagen\r\n        JPanel panel = new JPanel(null);\r\n        panel.setOpaque(false);\r\n        panel.setBounds(0,0,500,500);\r\n        // botones\r\n        JButton jugar = new JButton(\"Jugar\");\r\n        JButton creditos = new JButton(\"Creditos\");\r\n        JButton salir = new JButton(\"Salir\");\r\n        // acomodo de botones\r\n        jugar.setBounds(100,300,100,50);\r\n        creditos.setBounds(200,300,100,50);\r\n        salir.setBounds(300,300,100,50);\r\n        // boton jugar\r\n        jugar.setBackground(new Color(70,130,180));// fondo\r\n        jugar.setForeground(Color.WHITE);// color letra\r\n        jugar.setFocusPainted(false);// se quita el cuadrito de la opcion seleccionada en auto\r\n        jugar.setFont(new Font(\"Arial\", Font.BOLD,15)); // tipo y tamano de la letra en el boton\r\n        jugar.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2)); // color del borde\r\n        // boton creditos\r\n        creditos.setBackground(new Color(70,130,180));\r\n        creditos.setForeground(Color.WHITE);\r\n        creditos.setFocusPainted(false);\r\n        creditos.setFont(new Font(\"Arial\", Font.BOLD,15));\r\n        creditos.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));\r\n        // boton salir\r\n        salir.setBackground(new Color(70,130,180));\r\n        salir.setForeground(Color.WHITE);\r\n        salir.setFocusPainted(false);\r\n        salir.setFont(new Font(\"Arial\", Font.BOLD,15));\r\n        salir.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));\r\n        // efecto para cuando el mouse pase por encima del boton\r\n        jugar.addMouseListener(new java.awt.event.MouseAdapter() {\r\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\r\n                jugar.setBackground(new Color(100, 149, 237)); // Cambia a un azul m√°s claro\r\n            }\r\n            public void mouseExited(java.awt.event.MouseEvent evt) {\r\n                jugar.setBackground(new Color(70, 130, 180));  // Vuelve al original\r\n            }\r\n        });\r\n        creditos.addMouseListener(new java.awt.event.MouseAdapter() {\r\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\r\n                creditos.setBackground(new Color(100, 149, 237)); // Cambia a un azul m√°s claro\r\n            }\r\n            public void mouseExited(java.awt.event.MouseEvent evt) {\r\n                creditos.setBackground(new Color(70, 130, 180));  // Vuelve al original\r\n            }\r\n        });\r\n        salir.addMouseListener(new java.awt.event.MouseAdapter() {\r\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\r\n                salir.setBackground(new Color(100, 149, 237)); // Cambia a un azul m√°s claro\r\n            }\r\n            public void mouseExited(java.awt.event.MouseEvent evt) {\r\n                salir.setBackground(new Color(70, 130, 180));  // Vuelve al original\r\n            }\r\n        });\r\n\r\n        // agrego componentes a la ventana\r\n        ventana.add(jugar);\r\n        ventana.add(creditos);\r\n        ventana.add(salir);\r\n        ventana.add(panel);\r\n        // ventana visible\r\n        ventana.setVisible(true);\r\n        // acciones\r\n        // boton jugar\r\n        jugar.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n            }\r\n        });\r\n        // boton creditos\r\n        creditos.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                JOptionPane.showMessageDialog(ventana, \"Realizado por: \\n\" +\r\n                                \"Francisco Javier Oceguera Gutierrez\" +\r\n                                \"\\n Jos√© Ram√≥n Suffo Peimbert\",\r\n                        \"Cr√©ditos\", JOptionPane.DEFAULT_OPTION);\r\n            }\r\n        });\r\n        // boton salir\r\n        salir.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                System.exit(0);\r\n            }\r\n        });\r\n        //Boton Jugar\r\n\r\n        jugar.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                int numJugadores = 0;\r\n                while (numJugadores < 2 || numJugadores > 4) {\r\n                    String numJugadoresStr = JOptionPane.showInputDialog(ventana,\r\n                            \"Numero de jugadores\",\r\n                            \"Jugadores\",\r\n                            JOptionPane.QUESTION_MESSAGE);\r\n                    numJugadores = Integer.parseInt(numJugadoresStr);\r\n                    Object[] botones = {\"Bandera\", \"Numero\", \"Raza de Dragon Ball\"};\r\n                    int figuraMemorama = JOptionPane.showOptionDialog(ventana,\r\n                            \"Elige modalidad\",\r\n                            \"Modalidad\",\r\n                            JOptionPane.DEFAULT_OPTION,\r\n                            JOptionPane.QUESTION_MESSAGE,\r\n                            null,\r\n                            botones,\r\n                            botones[0]);\r\n                    String figura = \"\";\r\n                    switch (figuraMemorama) {\r\n                        case 0:\r\n                            figura = \"Bandera\";\r\n                            break;\r\n                        case 1:\r\n                            figura = \"Numero\";\r\n                            break;\r\n                        case 2:\r\n                            figura = \"Raza de Dragon Ball\";\r\n                            break;\r\n                    }\r\n                    Memorama juego = new Memorama(numJugadores, figura);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.java b/Main.java
--- a/Main.java	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/Main.java	(date 1746451401964)
@@ -16,7 +16,7 @@
         ventana.setVisible(true);
 
         // imagen
-        ImageIcon pic = new ImageIcon("C:\\Users\\joser\\IdeaProjects\\Practica 7\\ImageMain.png");
+        ImageIcon pic = new ImageIcon("C:\\Users\\RedBo\\OneDrive\\Escritorio\\POO\\Practica7\\ImageMain.png");
         JLabel image = new JLabel(pic);
         image.setBounds(0,0,500,500);
         ventana.setContentPane(image);
Index: Carta/Bandera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Carta;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Bandera extends Carta {\r\n    private String bandera;\r\n    private boolean esBandera;\r\n    public Bandera(String bandera, boolean esBandera) {\r\n        this.bandera = bandera;\r\n        this.esBandera = esBandera;\r\n    }\r\n    @Override\r\n    public boolean esIgual(Carta otraCarta){\r\n        if (otraCarta instanceof Bandera){\r\n            return this.bandera .equals( ((Bandera)otraCarta).bandera);\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public Icon obtenerIcono(){\r\n        if (esBandera) {\r\n            return new ImageIcon(\"C:\\\\Users\\\\joser\\\\IdeaProjects\\\\Practica 7\\\\Banderas\\\\\" + bandera + \".png\");\r\n        }else{\r\n            return new ImageIcon(\"C:\\\\Users\\\\joser\\\\IdeaProjects\\\\Practica 7\\\\Banderas\\\\\" + bandera + \"Escudo.png\");\r\n        }\r\n    }\r\n    @Override\r\n    public String obtenerDescripcion() {\r\n        return bandera;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Carta/Bandera.java b/Carta/Bandera.java
--- a/Carta/Bandera.java	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/Carta/Bandera.java	(date 1746451401950)
@@ -19,9 +19,9 @@
     @Override
     public Icon obtenerIcono(){
         if (esBandera) {
-            return new ImageIcon("C:\\Users\\joser\\IdeaProjects\\Practica 7\\Banderas\\" + bandera + ".png");
+            return new ImageIcon("C:\\Users\\RedBo\\OneDrive\\Escritorio\\POO\\Practica7\\Banderas\\" + bandera + ".png");
         }else{
-            return new ImageIcon("C:\\Users\\joser\\IdeaProjects\\Practica 7\\Banderas\\" + bandera + "Escudo.png");
+            return new ImageIcon("C:\\Users\\RedBo\\OneDrive\\Escritorio\\POO\\Practica7\\Banderas\\" + bandera + "Escudo.png");
         }
     }
     @Override
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"openjdk-24 (3)\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/.idea/misc.xml	(date 1746451401950)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-24 (3)" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_24" default="true" project-jdk-name="openjdk-24 (3)" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: Carta/Numero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Carta;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Numero extends Carta {\r\n    private int numero;\r\n    public Numero(int numero) {\r\n        this.numero = numero;\r\n    }\r\n    @Override\r\n    public boolean esIgual(Carta otraCarta){\r\n        boolean esPar;\r\n        // esta carta es par\r\n        if (numero%2 == 0){\r\n            esPar = true;\r\n        }else{\r\n            esPar = false;\r\n        }\r\n        boolean carta2esPar;\r\n        if (((Numero)otraCarta).numero%2 == 0){\r\n            carta2esPar = true;\r\n        }else{\r\n            carta2esPar = false;\r\n        }\r\n        if (esPar == carta2esPar){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public Icon obtenerIcono(){\r\n        return new ImageIcon(\"C:\\\\Users\\\\joser\\\\IdeaProjects\\\\Practica 7\\\\Numeros\\\\num\"+numero+\".png\");\r\n    }\r\n\r\n    @Override\r\n    public String obtenerDescripcion() {\r\n        return String.valueOf(numero);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Carta/Numero.java b/Carta/Numero.java
--- a/Carta/Numero.java	(revision a0a43ff11fd21893e2da8dfa6647986dec4158b0)
+++ b/Carta/Numero.java	(date 1746451401950)
@@ -29,7 +29,7 @@
     }
     @Override
     public Icon obtenerIcono(){
-        return new ImageIcon("C:\\Users\\joser\\IdeaProjects\\Practica 7\\Numeros\\num"+numero+".png");
+        return new ImageIcon("C:\\Users\\RedBo\\OneDrive\\Escritorio\\POO\\Practica7\\Numeros\\num"+numero+".png");
     }
 
     @Override
